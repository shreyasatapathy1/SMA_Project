@using Microsoft.AspNetCore.Identity
@model List<SocialMediaApp.Models.Post>
@inject UserManager<SocialMediaApp.Models.ApplicationUser> UserManager

@{
    ViewData["Title"] = "Home Feed";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css" rel="stylesheet" />

<style>
    .feed-wrapper {
        max-width: 650px;
        margin: 0 auto;
    }

    .feed-card {
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        margin-bottom: 25px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    .post-header {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        border-bottom: 1px solid #f0f0f0;
    }

    .profile-pic {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 10px;
    }

    .user-name {
        font-weight: 600;
    }

    .post-content {
        padding: 15px;
        font-size: 16px;
    }

    .post-media {
        width: 100%;
        display: block;
    }

    .post-footer {
        padding: 10px 15px;
        font-size: 13px;
        color: #888;
        display: flex;
        justify-content: space-between;
    }

    .action-icons i {
        font-size: 18px;
        margin-left: 14px;
        cursor: pointer;
    }

        .action-icons i:hover {
            color: #000;
        }

    .like-button {
        border: none;
        background: none;
        cursor: pointer;
        font-size: 16px;
        padding: 0;
    }

        .like-button .bi-heart-fill {
            color: red;
            display: none;
        }

        .like-button.liked .bi-heart {
            display: none;
        }

        .like-button.liked .bi-heart-fill {
            display: inline-block;
        }

    .comment-section {
        padding: 10px 15px;
        display: none;
    }

    .comment-box {
        display: flex;
        margin-top: 10px;
    }

        .comment-box input {
            flex-grow: 1;
            margin-right: 10px;
        }

    .bi {
        transition: color 0.2s ease;
    }
</style>

<div class="container mt-4">
    <h3 class="text-center mb-4">Public Feed</h3>
    @* Check if user is authenticated *@
    <input type="hidden" id="isUserLoggedIn" value="@(User.Identity.IsAuthenticated ? "True" : "False")" />

    @foreach (var post in Model)
    {
        var currentUserId = UserManager.GetUserId(User);
        var isLiked = post.Likes.Any(like => like.UserId == currentUserId);

        <div class="feed-wrapper" id="post-@post.Id">
            <div class="feed-card">

                <div class="post-header d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center flex-grow-1">
                        <img src="@(!string.IsNullOrEmpty(post.User?.ProfilePictureUrl) ? post.User.ProfilePictureUrl : "/images/profile/default.jpg")" class="profile-pic" alt="Profile" />
                        <div>
                            <div class="user-name">@post.User?.Name</div>
                            <div class="text-muted" style="font-size: 12px;">@post.PostedAt.ToString("dd MMM yyyy, hh:mm tt")</div>
                        </div>
                    </div>

                    <!-- 🚩 Report Post Button -->
                    @* <button class="btn btn-sm btn-outline-danger" title="Report Post" onclick="reportPost(@post.Id)"> *@
                    @*     <i class="bi bi-flag-fill"></i> *@
                    @* </button> *@
                    <div class="ms-auto">
                        <button class="btn btn-sm btn-outline-danger btn-report" data-post-id="@post.Id" title="Report Post">
                            <i class="bi bi-flag-fill"></i>
                        </button>
                    </div>

                </div>

                @* <div id="post-@post.Id" class="card mb-4 shadow-sm"> *@
                    
                @*     <div class="card-body"> *@
                @if (!string.IsNullOrEmpty(post.TextContent))
                {
                    <div class="post-content">@post.TextContent</div>
                }

                @if (!string.IsNullOrEmpty(post.MediaUrl))
                {
                    if (post.MediaType == "image")
                    {
                        <img src="@post.MediaUrl" class="post-media" />
                    }
                    else if (post.MediaType == "video")
                    {
                        <video class="post-media" controls>
                            <source src="@post.MediaUrl" type="video/mp4" />
                        </video>
                    }
                }
                @*     </div> *@
                @* </div> *@
                <div class="post-footer">
                    <div class="action-icons">
                        <button class="like-button @(isLiked ? "liked" : "")" data-postid="@post.Id">
                            <i class="bi bi-heart"></i>
                            <i class="bi bi-heart-fill"></i>
                            <span class="like-count">@post.Likes.Count()</span>
                        </button>

                        <span class="ms-3">
                            <i class="bi bi-chat toggle-comment" data-postid="@post.Id" title="View Comments"></i>
                            <span class="comment-count">@post.Comments.Count()</span>
                        </span>

                        <i class="bi bi-share ms-3 share-icon" title="Share" data-postid="@post.Id"></i>
                        <span class="share-count ms-1">0</span>




                    </div>
                    <span>@post.PostedAt.ToString("g")</span>
                </div>

                <div class="comment-section" id="comments-@post.Id">
                    <div class="comments-container mb-2">
                        @foreach (var comment in post.Comments.OrderByDescending(c => c.CommentedAt))
                        {
                            await Html.RenderPartialAsync("_SingleCommentPartial", comment);
                        }
                    </div>

                    <div class="comment-box">
                        <input type="text" class="form-control comment-input" placeholder="Write a comment..." data-postid="@post.Id" />
                        <button class="btn btn-primary btn-sm post-comment" data-postid="@post.Id">Post</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Share Post Modal -->
<div class="modal fade" id="sharePostModal" tabindex="-1" aria-labelledby="sharePostModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Share Post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-2">
                    <label>Select Friend</label>
                    <select id="friendDropdown" class="form-select"></select>
                </div>
                <div class="mb-2">
                    <label>Message (optional)</label>
                    <textarea id="shareMessage" class="form-control" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="sendPostBtn">Send</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
                            // Fix: Bind report button click
        $(document).on("click", ".btn-report", function () {
            const postId = $(this).data("post-id");
            if (!postId) return;

            if (!confirm("Are you sure you want to report this post?")) return;

            $.ajax({
                url: '/User/Post/Report',
                type: 'POST',
                data: { postId: postId },
                success: function (response) {
                    alert("Post reported successfully.");
                    $("#post-" + postId).remove(); // Optional: remove post from feed
                },
                error: function () {
                    alert("An error occurred while reporting the post.");
                }
            });
        });

    


        $(document).ready(function () {
                    // Load share counts for all posts on initial page load
        $(".share-icon").each(function () {
            const postId = $(this).data("postid");
            const shareCountSpan = $(this).siblings(".share-count");

            $.get("/User/Post/GetShareCount", { postId: postId }, function (res) {
                if (res.count !== undefined) {
                    shareCountSpan.text(res.count);
                }
            });
        });

            // LIKE toggle
            $(".like-button").click(function () {
                var postId = $(this).data("postid");
                var button = $(this);

                $.ajax({
                    type: "POST",
                    url: "/User/Like/Toggle",
                    data: { postId: postId },
                    success: function (response) {
                        button.toggleClass("liked");
                        button.find(".like-count").text(response.totalLikes);
                    },
                    error: function (xhr) {
                        if (xhr.status === 401) {
                            alert("Please log in to like posts.");
                        } else {
                            alert("Something went wrong. Please try again.");
                        }
                    }
                });
            });

            // Toggle comments
            $(".toggle-comment").click(function () {
                var postId = $(this).data("postid");
                $("#comments-" + postId).slideToggle();
            });

            // POST a comment
            $(".post-comment").click(function () {
                var postId = $(this).data("postid");
                var input = $(".comment-input[data-postid='" + postId + "']");
                var commentText = input.val().trim();
                var button = $(this);

                if (commentText === "") return;

                $.ajax({
                    type: "POST",
                    url: "/User/Comment/Add",
                    data: { postId: postId, content: commentText },
                    success: function (res) {
                        if (res.success) {
                            var html = `
                                <div class="d-flex align-items-start mb-2">
                                    <img src="${res.profilePic}" alt="User" class="rounded-circle" width="32" height="32" style="object-fit: cover;" />
                                    <div class="ms-2">
                                        <strong>${res.user}</strong><br />
                                        <span>${res.content}</span><br />
                                        <small class="text-muted">${res.time}</small>
                                    </div>
                                </div>`;
                            $("#comments-" + postId + " .comments-container").prepend(html);
                            input.val('');

                            let countSpan = button.closest(".feed-card").find(".comment-count");
                            let currentCount = parseInt(countSpan.text()) || 0;
                            countSpan.text(currentCount + 1);
                        }
                    },
                    error: function (xhr) {
                        if (xhr.status === 401) {
                            alert("Please log in to comment.");
                        } else {
                            alert("Something went wrong. Please try again.");
                        }
                    }
                });
            });

            // Submit comment on Enter key
            $(".comment-input").keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $(this).siblings(".post-comment").click();
                }
            });
        //     Report Post
        //             function reportPost(postId) {
        //     const confirmed = confirm("Are you sure you want to report this post?");
        //     if (!confirmed) return;

        //     $.ajax({
        //         type: "POST",
        //         url: "/User/Post/Report",
        //         data: { postId: postId },
        //         success: function (res) {
        //             alert(res.message || "Reported successfully.");
        //         },
        //         error: function (xhr) {
        //             if (xhr.status === 401) {
        //                 alert("Please login to report posts.");
        //             } else {
        //                 alert("Failed to report post.");
        //             }
        //         }
        //     });
        // }

            // SHARE post
            let currentPostIdToShare = 0;

                    
        $(document).on("click", ".share-icon", function () {
            const isLoggedIn = $("#isUserLoggedIn").val() === "True";

            if (!isLoggedIn) {
                alert("Please log in to share posts.");
                return;
            }

            const postId = $(this).data("postid");
            currentPostIdToShare = postId;

            $("#shareMessage").val("");
            $("#friendDropdown").empty();

            // ✅ Load friends and open modal
            $.get("/User/Chat/GetFriendsForShare", function (data) {
                if (data && data.length > 0) {
                    data.forEach(friend => {
                        $("#friendDropdown").append(`<option value="${friend.userId}">${friend.userName}</option>`);
                    });
                } else {
                    $("#friendDropdown").append(`<option disabled>No friends found</option>`);
                }

                // ✅ Open modal only AFTER friend list is loaded
                $("#sharePostModal").modal("show");
            });
        });


            $("#sendPostBtn").click(function () {
                const friendId = $("#friendDropdown").val();
                const message = $("#shareMessage").val();

                if (!friendId) {
                    alert("Please select a friend.");
                    return;
                }

                        $.ajax({
            type: "POST",
            url: "/User/Chat/SendPost",
                    data: {
            receiverId: friendId,
            content: message || "",  // add fallback to empty string here
            postId: currentPostIdToShare
        }
        ,
                    success: function () {
            $("#sharePostModal").modal("hide");
            alert("Post shared successfully!");

            // 🔁 Update share count dynamically
            $.get("/User/Post/GetShareCount", { postId: currentPostIdToShare }, function (res) {
                if (res.count !== undefined) {
                             const shareCountSpan = $(`.share-icon[data-postid='${currentPostIdToShare}']`)
                .closest(".action-icons")
                .find(".share-count");
            shareCountSpan.text(res.count);

                }
            });
        },

            error: function (xhr) {
                if (xhr.status === 401) {
                    alert("Please login to share posts.");
                } else {
                    alert("Failed to share post.");
                }
            }
        });

            });

        });
    </script>
}
